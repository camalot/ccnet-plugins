<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CCNetConfig.Core</name>
    </assembly>
    <members>
        <member name="T:CCNetConfig.Core.Components.AlienbrainUri">
            <summary>
            A <see cref="T:System.Uri"/> object that supports only the "Alienbrain" scheme
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.AlienbrainUri.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.AlienbrainUri"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="T:CCNetConfig.Core.CloneableList`1">
            <summary>
            A List&lt;&gt; that implements <see cref="T:System.ICloneable"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CCNetConfig.Core.CloneableList`1.Clone">
            <summary>
            Creates a deep copy of this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.CloneableList`1.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Collections.ProjectList">
            <summary>
            A collection of <see cref="T:CCNetConfig.Core.Project">Project</see> objects.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Collections.ProjectList.Contains(System.String)">
            <summary>
            Determines whether this contains the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>
            	<see langword="true"/> if this contains the specified name; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Collections.ProjectList.IndexOf(System.String)">
            <summary>
            Gets the index of the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Collections.ProjectList.Remove(System.String)">
            <summary>
            Removes the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:CCNetConfig.Core.Collections.ProjectList.GetCountByName(System.String)">
            <summary>
            Gets the number of projects that have the specified name. 
            </summary>
            <param name="name"></param>
            <returns></returns>
            <remarks>Used to check if a duplicate project name was added.</remarks>
        </member>
        <member name="P:CCNetConfig.Core.Collections.ProjectList.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:CCNetConfig.Core.Project"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:CCNetConfig.Core.Collections.ProjectList.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="T:CCNetConfig.Core.Collections.ProjectList.ProjectComparer">
            <summary>
            Compares <see cref="T:CCNetConfig.Core.Project"/> objects for sorting.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Collections.ProjectList.ProjectComparer.Compare(CCNetConfig.Core.Project,CCNetConfig.Core.Project)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.AlienbrainUriTypeConverter">
            <summary>
            A TypeConverter that allows only AlienbrainUri values.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.AlienbrainUriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.AlienbrainUriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.AlienbrainUriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:CCNetConfig.Core.Components.AlienbrainUriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="M:CCNetConfig.Core.Components.AlienbrainUriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.BrowseForFolderUIEditor">
            <summary>
            A UITypeEditor to browse for a folder. The selected folder is then set to the property.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.BrowseForFolderUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.BrowseForFolderUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.BrowseForFolderDescriptionAttribute">
            <summary>
            Sets the desctription of the BrowseForFolder window.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.BrowseForFolderDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.BrowseForFolderDescriptionAttribute"/> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="P:CCNetConfig.Core.Components.BrowseForFolderDescriptionAttribute.Description">
            <summary>
            Gets or sets the description for the browse for folder dialog.
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Components.CollectionEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.CollectionEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.CollectionEditor"/> class.
            </summary>
            <param name="type">The type of the collection for this editor to edit.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.CollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value.
            </summary>
            <param name="context">The context.</param>
            <param name="provider">The provider.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.CollectionEditor.CreateCollectionForm">
            <summary>
            Creates a new form to display and edit the current collection.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm"></see> to provide as the user interface for editing the collection.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.FileTypeFilterAttribute">
            <summary>
            Specifies the filter for the File Dialog.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.FileTypeFilterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.FileTypeFilterAttribute"/> class.
            </summary>
            <param name="fileTypeFilter">The file type filter.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.FileTypeFilterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.FileTypeFilterAttribute"/> class.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Components.FileTypeFilterAttribute.FileTypeFilter">
            <summary>
            Gets or sets the file type filter.
            </summary>
            <value>The file type filter used for the open file dialog.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.MaximumStringLengthAttribute">
            <summary>
            Sets a maximum length to the multiline string editor.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.MaximumStringLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MaximumStringLengthAttribute"/> class.
            </summary>
            <param name="maxLength">Length of the max.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MaximumStringLengthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MaximumStringLengthAttribute"/> class.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Components.MaximumStringLengthAttribute.MaximumLength">
            <summary>
            Gets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.IntegerValueAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Components.IntegerValueAttribute.val">
            <summary>
            
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.IntegerValueAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.IntegerValueAttribute"/> class.
            </summary>
            <param name="val">The val.</param>
        </member>
        <member name="P:CCNetConfig.Core.Components.IntegerValueAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.MinimumValueAttribute">
            <summary>
            Represents a minimum value
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.MinimumValueAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MinimumValueAttribute"/> class.
            </summary>
            <param name="minimum">The minimum.</param>
        </member>
        <member name="T:CCNetConfig.Core.Components.MaximumValueAttribute">
            <summary>
            Represents a maximum value
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.MaximumValueAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MaximumValueAttribute"/> class.
            </summary>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="T:CCNetConfig.Core.Components.MultilineStringEditorForm">
            <summary>
            The form used to edit multi-line strings
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.MultilineStringEditorForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MultilineStringEditorForm"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.MultilineStringEditorForm.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MultilineStringEditorForm"/> class.
            </summary>
            <param name="maxLength">maximum length of the string.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MultilineStringEditorForm.okButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the okButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MultilineStringEditorForm.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the cancelButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CCNetConfig.Core.Components.MultilineStringEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.MultilineStringEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MultilineStringEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Components.MultilineStringEditorForm.DataString">
            <summary>
            Gets or sets the data string.
            </summary>
            <value>The data string.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.MultilineStringUIEditor">
            <summary>
            A UI editor for editing multi-line strings
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.MultilineStringUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.MultilineStringUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.NumericUpDownUIEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.NumericUpDownUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.NumericUpDownUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the edit style.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.OpenFileDialogUIEditor">
            <summary>
            UIEditor that allows a user to select a file in a property grid.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.OpenFileDialogUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.OpenFileDialogUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.OpenFileDialogTitleAttribute">
            <summary>
            Sets the title of the open file dialog.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.OpenFileDialogTitleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.OpenFileDialogTitleAttribute"/> class.
            </summary>
            <param name="title">The title.</param>
        </member>
        <member name="P:CCNetConfig.Core.Components.OpenFileDialogTitleAttribute.Title">
            <summary>
            Gets or sets the title for the Open File Dialog.
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Components.PluginAttribute">
            <summary>
            Defines a class that is not a native CCNet object.
            </summary>
            <remarks>
            This is used to help display objects that are supported by CCNetConfig but not core objects in CCNet.
            UI to allow the user to select the plugins that they have installed so the property grid only displays
            Objects they have.
            </remarks>
        </member>
        <member name="T:CCNetConfig.Core.Components.ReflectorIgnoreAttribute">
            <summary>
            Indicates that a property or field is not included when serializing
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.ReflectorIgnoreAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.ReflectorIgnoreAttribute"/> class.
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Components.ReflectorNameAttribute">
            <summary>
            Represents the name of the element or attribute defined by the Reflector Attribute.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.ReflectorNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.ReflectorNameAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:CCNetConfig.Core.Components.ReflectorNameAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.ReflectorNodeTypes">
            <summary>
            Node type to create when serializing
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Components.ReflectorNodeTypes.Attribute">
            <summary>
            Create attribute
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Components.ReflectorNodeTypes.Element">
            <summary>
            Create an element
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Components.ReflectorNodeTypes.Value">
            <summary>
            The value of an element
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Components.ReflectorNodeTypeAttribute">
            <summary>
            Indicates what type of node should be used when serializing
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.ReflectorNodeTypeAttribute.#ctor(CCNetConfig.Core.Components.ReflectorNodeTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.ReflectorNodeTypeAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.ReflectorNodeTypeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.ReflectorNodeTypeAttribute"/> class.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Components.ReflectorNodeTypeAttribute.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.RequiredAttribute">
            <summary>
            Indicates that a property or field is required
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.RequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.RequiredAttribute"/> class.
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Components.SourceControlListUIEditor">
            <summary>
            Shows a <see cref="T:CCNetConfig.Core.Components.SourceControlListUIEditor"/>
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.SourceControlListUIEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.SourceControlListUIEditor"/> class.
            </summary>
            <param name="type">The type of the collection for this editor to edit.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.SourceControlListUIEditor.CreateNewItemTypes">
            <summary>
            Gets the data types that this collection editor can contain.
            </summary>
            <returns>
            An array of data types that this collection can contain.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.DatePickerUIEditor">
            <summary>
            An UITypeEditor that drops down a calendar to select a date.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.DatePickerUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.DatePickerUIEditor.mc_DateSelected(System.Object,System.Windows.Forms.DateRangeEventArgs)">
            <summary>
            Handles the DateSelected event of the mc control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.DateRangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.DatePickerUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.DefaultableBooleanUIEditor">
            <summary>
            A dropdown that shows a "default" value, <c>true</c> and <c>false</c>
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Components.DefaultableBooleanUIEditor.NULL_VALUE">
            <summary>
            Default Text value for a null <c>booleam</c>.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableBooleanUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableBooleanUIEditor.OnListBoxChanged(System.Object,System.EventArgs)">
            <summary>
            Called when [list box changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableBooleanUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.DefaultableEnumUIEditor">
            <summary>
            A drowdown that shows a default value plus all the possible values for the <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Components.DefaultableEnumUIEditor.NULL_VALUE">
            <summary>
            Default Text value for a null enum.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableEnumUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableEnumUIEditor.OnListBoxChanged(System.Object,System.EventArgs)">
            <summary>
            Called when [list box changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableEnumUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.LabellerUIEditor">
            <summary>
            Shows a dropdown of all the possible <see cref="T:CCNetConfig.Core.Labeller"/> that are loaded.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.LabellerUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.LabellerUIEditor.OnListBoxChanged(System.Object,System.EventArgs)">
            <summary>
            Called when [list box changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.LabellerUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.LabellerUIEditor.LabelInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.LabellerUIEditor.LabelInfo"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.LabellerUIEditor.LabelInfo.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.LabellerUIEditor.LabelInfo"/> class.
            </summary>
            <param name="t">The t.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.LabellerUIEditor.LabelInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:CCNetConfig.Core.Components.LabellerUIEditor.LabelInfo.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CCNetConfig.Core.Components.LabellerUIEditor.LabelInfo.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.PasswordTypeConverter">
            <summary>
            An Converter that takes a string and converts it in to a <see cref="T:CCNetConfig.Core.HiddenPassword"/>
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.PasswordTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.PasswordTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.PasswordTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:CCNetConfig.Core.Components.PasswordTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="M:CCNetConfig.Core.Components.PasswordTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.IListTypeConverter">
            <summary>
            Converts a List of Path Filters to show how many are in the collection in the property grid
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.IListTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.IListTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:CCNetConfig.Core.Components.SourceControlUIEditor">
            <summary>
            Provides a dropdown of all the <see cref="T:CCNetConfig.Core.SourceControl"/> objects that have been loaded.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.SourceControlUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.SourceControlUIEditor.OnListBoxChanged(System.Object,System.EventArgs)">
            <summary>
            Called when [list box changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.SourceControlUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.SourceControlUIEditor.SourceControlInfo">
            <summary>
            Stores info of the source control.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.SourceControlUIEditor.SourceControlInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.SourceControlUIEditor.SourceControlInfo"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.SourceControlUIEditor.SourceControlInfo.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.SourceControlUIEditor.SourceControlInfo"/> class.
            </summary>
            <param name="t">The t.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.SourceControlUIEditor.SourceControlInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:CCNetConfig.Core.Components.SourceControlUIEditor.SourceControlInfo.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CCNetConfig.Core.Components.SourceControlUIEditor.SourceControlInfo.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.StateUIEditor">
            <summary>
            A Dropdown of all the <see cref="T:CCNetConfig.Core.State"/> objects.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.StateUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.StateUIEditor.OnListBoxChanged(System.Object,System.EventArgs)">
            <summary>
            Called when [list box changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.StateUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.StateUIEditor.StateInfo">
            <summary>
            sotres info about the state objects.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.StateUIEditor.StateInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.StateUIEditor.StateInfo"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.StateUIEditor.StateInfo.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.StateUIEditor.StateInfo"/> class.
            </summary>
            <param name="t">The t.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.StateUIEditor.StateInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:CCNetConfig.Core.Components.StateUIEditor.StateInfo.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CCNetConfig.Core.Components.StateUIEditor.StateInfo.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.StringListUIEditor">
            <summary>
            A dropdown that allows a user to enter multiple lines of strings, each line is then converted in to a collection.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.StringListUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.StringListUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.StringListTypeConverter">
            <summary>
            Converts a string to a collection of strings and back to a string.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.StringListTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.StringListTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.StringListTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="M:CCNetConfig.Core.Components.StringListTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:CCNetConfig.Core.Components.TimeUIEditor">
            <summary>
            A dropdown that allows the user to select a time
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.TimeUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.TimeUIEditor.dtp_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TextChanged event of the dtp control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.TimeUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.TimeTypeConverter">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to a <see langword="string"/> and back.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.TimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.TimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.TimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:CCNetConfig.Core.Components.TimeTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.TimeTypeConverter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.TimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:CCNetConfig.Core.Components.TriggerListUIEditor">
            <summary>
            A Collection editor for triggers.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.TriggerListUIEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.TriggerListUIEditor"/> class.
            </summary>
            <param name="type">The type of the collection for this editor to edit.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.TriggerListUIEditor.CreateNewItemTypes">
            <summary>
            Gets the data types that this collection editor can contain.
            </summary>
            <returns>
            An array of data types that this collection can contain.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.TriggerSelectorUIEditor">
            <summary>
            A dropdown of <see cref="T:CCNetConfig.Core.Trigger"/> objects.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.TriggerSelectorUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.TriggerSelectorUIEditor.OnListBoxChanged(System.Object,System.EventArgs)">
            <summary>
            Called when [list box changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.TriggerSelectorUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.TriggerSelectorUIEditor.TriggerInfo">
            <summary>
            stores info about the trigger.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.TriggerSelectorUIEditor.TriggerInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.TriggerSelectorUIEditor.TriggerInfo"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.TriggerSelectorUIEditor.TriggerInfo.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.TriggerSelectorUIEditor.TriggerInfo"/> class.
            </summary>
            <param name="t">The t.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.TriggerSelectorUIEditor.TriggerInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:CCNetConfig.Core.Components.TriggerSelectorUIEditor.TriggerInfo.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CCNetConfig.Core.Components.TriggerSelectorUIEditor.TriggerInfo.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.TriggerListTypeConverter">
            <summary>
            Converts a collection of triggers to a string that shows that there are triggers in the collection.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.TriggerListTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.TriggerListTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:CCNetConfig.Core.Components.DayOfWeekUIEditor">
            <summary>
            A dropdown UITypeEditor that allows the selection of multiple Days of the Week.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.DayOfWeekUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.DayOfWeekUIEditor.OnListBoxItemCheck(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Called when [list box item check].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.ItemCheckEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.DayOfWeekUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.DayOfWeekListTypeConverter">
            <summary>
            Converts a List&lt;DayOfWeek&gt; to comma separated string of days
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.DayOfWeekListTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.DayOfWeekListTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:CCNetConfig.Core.Components.UserGroupUIEditor">
            <summary>
            Not Yet Implemented.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.UserGroupUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.UserGroupUIEditor.mc_DateSelected(System.Object,System.Windows.Forms.DateRangeEventArgs)">
            <summary>
            Handles the DateSelected event of the mc control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.DateRangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.UserGroupUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.VersionAttribute">
            <summary>
            A base class for indicating what version a property belongs to.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.VersionAttribute"/> class.
            </summary>
            <param name="strVersion">The STR version.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionAttribute.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.VersionAttribute"/> class.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.VersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.VersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.VersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
            <param name="revision">The revision.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionAttribute.CompareTo(System.Version)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionAttribute.System#IComparable{System#Version}#CompareTo(System.Version)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="P:CCNetConfig.Core.Components.VersionAttribute.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.MinimumVersionAttribute">
            <summary>
            Specifies the minimum version a property belongs to
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.MinimumVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MinimumVersionAttribute"/> class.
            </summary>
            <param name="strVersion">The STR version.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MinimumVersionAttribute.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MinimumVersionAttribute"/> class.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MinimumVersionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MinimumVersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MinimumVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MinimumVersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MinimumVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MinimumVersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
            <param name="revision">The revision.</param>
        </member>
        <member name="T:CCNetConfig.Core.Components.MaximumVersionAttribute">
            <summary>
            Specifies the maximum version a property belongs to
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.MaximumVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MaximumVersionAttribute"/> class.
            </summary>
            <param name="strVersion">The STR version.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MaximumVersionAttribute.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MaximumVersionAttribute"/> class.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MaximumVersionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MaximumVersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MaximumVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MaximumVersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.MaximumVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.MaximumVersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
            <param name="revision">The revision.</param>
        </member>
        <member name="T:CCNetConfig.Core.Components.ExactVersionAttribute">
            <summary>
            Specifies the exact version a property belongs to
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.ExactVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.ExactVersionAttribute"/> class.
            </summary>
            <param name="strVersion">The STR version.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.ExactVersionAttribute.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.ExactVersionAttribute"/> class.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.ExactVersionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.ExactVersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.ExactVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.ExactVersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.ExactVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.ExactVersionAttribute"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
            <param name="revision">The revision.</param>
        </member>
        <member name="T:CCNetConfig.Core.Components.VersionBasedTypeDescriptionProvider">
            <summary>
            A <see cref="T:System.ComponentModel.TypeDescriptionProvider"/> used to display properties based on version.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionBasedTypeDescriptionProvider.#ctor(System.Type,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.VersionBasedTypeDescriptionProvider"/> class.
            </summary>
            <param name="t">The t.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionBasedTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
            <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
            <param name="instance">An instance of the type. Can be null if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</param>
            <returns>
            An <see cref="T:System.ComponentModel.ICustomTypeDescriptor"></see> that can provide metadata for the type.
            </returns>
        </member>
        <member name="P:CCNetConfig.Core.Components.VersionBasedTypeDescriptionProvider.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.VersionBasedTypeDescriptor">
            <summary>
            A <see cref="T:System.ComponentModel.CustomTypeDescriptor"/> used to display properties 
            that are only related to a specific version.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionBasedTypeDescriptor.#ctor(CCNetConfig.Core.Components.VersionBasedTypeDescriptionProvider,System.ComponentModel.ICustomTypeDescriptor,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.VersionBasedTypeDescriptor"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="objectType">Type of the object.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionBasedTypeDescriptor.GetProperties">
            <summary>
            Returns a collection of property descriptors for the object represented by this type descriptor.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> containing the property 
            descriptions for the object represented by this type descriptor. The default is 
            <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.VersionBasedTypeDescriptor.GetProperties(System.Attribute[])">
            <summary>
            Returns a filtered collection of property descriptors for the object represented by this type 
            descriptor.
            </summary>
            <param name="attributes">An array of attributes to use as a filter. This can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> containing the property 
            descriptions for the object represented by this type descriptor. The default is 
            <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"></see>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Configuration.BackupSettings">
            <summary>
            Settings for backing up the config file.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.BackupSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Configuration.BackupSettings"/> class.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.BackupSettings.SavePathString">
            <summary>
            Gets or sets the save path as a string.
            </summary>
            <value>The save path as a string.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.BackupSettings.SavePath">
            <summary>
            Gets or sets the save path.
            </summary>
            <value>The save path.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.BackupSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CCNetConfig.Core.Configuration.BackupSettings"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.BackupSettings.NumberOfBackupsToKeep">
            <summary>
            Gets or sets the number of backups to keep.
            </summary>
            <value>The number of backups to keep.</value>
        </member>
        <member name="T:CCNetConfig.Core.Configuration.CCNetConfigConfiguration">
            <summary>
            Configuration Object for CCNetConfig
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.CCNetConfigConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Configuration.CCNetConfigConfiguration"/> class.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigConfiguration.Files">
            <summary>
            Gets or sets the files.
            </summary>
            <value>The files.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigConfiguration.Item(System.String)">
            <summary>
            Gets the <see cref="T:CCNetConfig.Core.Configuration.CCNetConfigConfiguration.ConfigurationFile"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigConfiguration.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:CCNetConfig.Core.Configuration.CCNetConfigConfiguration.ConfigurationFile"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:CCNetConfig.Core.Configuration.CCNetConfigConfiguration.ConfigurationFile">
            <summary>
            contains information about a configuration file.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.CCNetConfigConfiguration.ConfigurationFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Configuration.CCNetConfigConfiguration.ConfigurationFile"/> class.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigConfiguration.ConfigurationFile.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigConfiguration.ConfigurationFile.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="T:CCNetConfig.Core.Configuration.CCNetConfigSettings">
            <summary>
            Represents the settings for CCNetConfig
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.CCNetConfigSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Configuration.CCNetConfigSettings"/> class.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigSettings.Components">
            <summary>
            Gets or sets the components.
            </summary>
            <value>The components.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigSettings.UpdateSettings">
            <summary>
            Gets or sets the update settings.
            </summary>
            <value>The update settings.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigSettings.BackupSettings">
            <summary>
            Gets or sets the backup settings.
            </summary>
            <value>The backup settings.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigSettings.ExternalViewer">
            <summary>
            Gets or sets the external viewer.
            </summary>
            <value>The external viewer.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigSettings.ExternalViewerArguments">
            <summary>
            Gets or sets the external viewer arguments.
            </summary>
            <value>The external viewer arguments.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigSettings.MinimizeToTray">
            <summary>
            Gets or sets a value indicating whether [minimize to tray].
            </summary>
            <value><c>true</c> if [minimize to tray]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigSettings.MinimizeToTrayOnClose">
            <summary>
            Gets or sets a value indicating whether [minimize to tray on close].
            </summary>
            <value>
            	<c>true</c> if [minimize to tray on close]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigSettings.WatchForFileChanges">
            <summary>
            Gets or sets a value indicating whether [watch for file changes].
            </summary>
            <value>
            	<c>true</c> if [watch for file changes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.CCNetConfigSettings.SortProject">
            <summary>
            Gets or sets a value indicating whether to sort the project.
            </summary>
            <value>
            	<see langword="true"/> if projects should be sorted; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:CCNetConfig.Core.Configuration.UpdateProxySettings">
            <summary>
            Proxy Information used when connecting to check for updates.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.UpdateProxySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Configuration.UpdateProxySettings"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.UpdateProxySettings.CreateProxy">
            <summary>
            Creates the proxy.
            </summary>
            <returns>The proxy client.</returns>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateProxySettings.UseProxy">
            <summary>
            Gets or sets a value indicating whether [use proxy].
            </summary>
            <value><c>true</c> if [use proxy]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateProxySettings.ProxyPort">
            <summary>
            Gets or sets the proxy port.
            </summary>
            <value>The proxy port.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateProxySettings.ProxyServer">
            <summary>
            Gets or sets the proxy server.
            </summary>
            <value>The proxy server.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateProxySettings.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateProxySettings.PasswordEncoded">
            <summary>
            Gets or sets the password encoded.
            </summary>
            <value>The password encoded.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateProxySettings.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="T:CCNetConfig.Core.Configuration.UpdateSettings">
            <summary>
            The update settings for CCNetConfig
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.UpdateSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Configuration.UpdateSettings"/> class.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateSettings.UpdaterApplication">
            <summary>
            Gets or sets the updater application.
            </summary>
            <value>The updater application.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateSettings.LaunchArgumentsFormat">
            <summary>
            Gets or sets the launch arguments format.
            </summary>
            <value>The launch arguments format.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateSettings.CheckOnStartup">
            <summary>
            Gets or sets a value indicating whether [check on startup].
            </summary>
            <value><c>true</c> if [check on startup]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateSettings.UpdateCheckType">
            <summary>
            Gets or sets the type of the update check.
            </summary>
            <value>The type of the update check.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateSettings.ProxySettings">
            <summary>
            Gets or sets the proxy settings.
            </summary>
            <value>The proxy settings.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.UpdateSettings.ShowOnlyLatestVersion">
            <summary>
            Gets or sets a value indicating whether to only show the latest version information in the update dialog.
            </summary>
            <value>
            	<c>true</c> if [show only latest version]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CCNetConfig.Core.Configuration.Handlers.CCNetConfigConfigurationSectionHandler">
            <summary>
            Handles the configuration blocks in a configuration file.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.Handlers.CCNetConfigConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlElement)">
            <summary>
            Creates the specified parent.
            </summary>
            <param name="parent">The parent.</param>
            <param name="configContext">The config context.</param>
            <param name="section">The section.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.Handlers.CCNetConfigConfigurationSectionHandler.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent"></param>
            <param name="configContext">Configuration context object.</param>
            <param name="section"></param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:CCNetConfig.Core.Configuration.Handlers.CCNetConfigSettingsConfigurationSectionHandler">
            <summary>
            Creates the Settings Object.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.Handlers.CCNetConfigSettingsConfigurationSectionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Configuration.Handlers.CCNetConfigSettingsConfigurationSectionHandler"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.Handlers.CCNetConfigSettingsConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlElement)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML element.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.Handlers.CCNetConfigSettingsConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="doc">The XML document.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.Handlers.CCNetConfigSettingsConfigurationSectionHandler.Create(System.Object,System.Object,System.IO.FileInfo)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="file">The file.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.Handlers.CCNetConfigSettingsConfigurationSectionHandler.Create(System.Object,System.Object,System.IO.Stream)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="stream">The stream.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.Handlers.CCNetConfigSettingsConfigurationSectionHandler.SaveSettings(CCNetConfig.Core.Configuration.CCNetConfigSettings)">
            <summary>
            Saves the settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.Handlers.CCNetConfigSettingsConfigurationSectionHandler.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:CCNetConfig.Core.Configuration.ComponentSettings">
            <summary>
            Represents settings for a plugin or a component
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.ComponentSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Configuration.ComponentSettings"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.ComponentSettings.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Configuration.ComponentSettings"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="display">if set to <c>true</c> [display].</param>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.ComponentSettings.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.ComponentSettings.Display">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CCNetConfig.Core.Configuration.ComponentSettings"/> should display.
            </summary>
            <value><c>true</c> if display; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CCNetConfig.Core.Configuration.ComponentSettingsList">
            <summary>
            Collection of <see cref="T:CCNetConfig.Core.Configuration.ComponentSettings"/>
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.ComponentSettingsList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Configuration.ComponentSettingsList"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.ComponentSettingsList.Contains(System.String)">
            <summary>
            Determines whether the object contains the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> if the object contains the specified name.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Configuration.ComponentSettingsList.IndexOf(System.String)">
            <summary>
            Gets the index of a Component or Plugin by name
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:CCNetConfig.Core.Configuration.ComponentSettingsList.Item(System.String)">
            <summary>
            Gets the <see cref="T:CCNetConfig.Core.Configuration.ComponentSettings"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:CCNetConfig.Core.CruiseControl">
            <summary>
            The Cruise Control object. All CCNet Config interaction starts with this object.
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.ICCNetObject">
            <summary>
            Defines an object that is a CCNetObject.
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Serialization.ISerialize">
            <summary>
            An interface that defines an object that can serialize and deserialize itself
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Serialization.ISerialize.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Serialization.ISerialize.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:CCNetConfig.Core.ICCNetDocumentation">
            <summary>
            Defines an object that has a link to documentation.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.ICCNetDocumentation.DocumentationUri">
            <summary>
            Gets the documentation URI.
            </summary>
            <value>The documentation URI.</value>
        </member>
        <member name="M:CCNetConfig.Core.CruiseControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.CruiseControl"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.CruiseControl.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.CruiseControl"/> class.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:CCNetConfig.Core.CruiseControl.SaveConfig(System.IO.Stream)">
            <summary>
            Saves the config.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:CCNetConfig.Core.CruiseControl.IsValidConfiguration(System.Exception@)">
            <summary>
            Determines whether this is a valid configuration.
            </summary>
            <param name="ex">The ex.</param>
            <returns>
            	<c>true</c> if this is a valid configuration; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.CruiseControl.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.CruiseControl.CCNetConfig#Core#Serialization#ISerialize#Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.CruiseControl.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified <see cref="T:System.IO.Stream">Stream</see>.
            </summary>
            <param name="strm">The Stream.</param>
        </member>
        <member name="M:CCNetConfig.Core.CruiseControl.Deserialize(System.Xml.XmlDocument)">
            <summary>
            Deserializes the specified <see cref="T:System.Xml.XmlDocument">XmlDocument</see>.
            </summary>
            <param name="ccnetConfig">The ccnet config.</param>
            <exception cref="T:CCNetConfig.Core.Exceptions.DuplicateProjectNameException">DuplicateProjectNameException</exception>
        </member>
        <member name="M:CCNetConfig.Core.CruiseControl.Deserialize(System.IO.FileInfo)">
            <summary>
            Deserializes the specified <see cref="T:System.IO.FileInfo">file</see>.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:CCNetConfig.Core.CruiseControl.Deserialize(System.String)">
            <summary>
            Deserializes the specified file.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="P:CCNetConfig.Core.CruiseControl.Projects">
            <summary>
            Gets the projects.
            </summary>
            <value>The projects.</value>
        </member>
        <member name="P:CCNetConfig.Core.CruiseControl.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:CCNetConfig.Core.CruiseControl.DocumentationUri">
            <summary>
            Gets the documentation URI.
            </summary>
            <value>The documentation URI.</value>
        </member>
        <member name="T:CCNetConfig.Core.Enums.UpdateMode">
            <summary>
            Denotes the type of update it is
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.UpdateMode.Beta">
            <summary>
            A Beta release
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.UpdateMode.Stable">
            <summary>
            A stable / production release
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.UpdateMode.UNKNOWN">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Enums.UpdateCheckType">
            <summary>
            Denotes the type of update feed to check. Default is Release
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.UpdateCheckType.BetaBuilds">
            <summary>
            Get only the beta builds
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.UpdateCheckType.ReleaseBuilds">
            <summary>
            Get only the release builds
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.UpdateCheckType.AllBuilds">
            <summary>
            Get all build types
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Enums.BuildCondition">
            <summary>
            The conditions in which a build should be attempted.
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.BuildCondition.NoBuild">
            <summary>
            Do not build
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.BuildCondition.IfModificationExists">
            <summary>
            Only build if the files have been modified since the last build
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.BuildCondition.ForceBuild">
            <summary>
            Build always
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Enums.AndOr">
            <summary>
            The logical operator to apply to the results of the nested triggers. (Added in CCNet 1.1)
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.AndOr.And">
            <summary>
            Operator to indicate to use multiple <see cref="T:CCNetConfig.Core.Trigger">trigger</see>s
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.AndOr.Or">
            <summary>
            Operator to indicate to use one <see cref="T:CCNetConfig.Core.Trigger">trigger</see> or another
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Enums.NotificationType">
            <summary>
            <para>Determines when to send email to this group.</para>
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.NotificationType.Always">
            <summary>
            Send email when any build occurs
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.NotificationType.Change">
            <summary>
            Send email when the status of the build changes (e.g. from 'passed' to 'failed').
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.NotificationType.Failed">
            <summary>
            Send email when the build fails.
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.NotificationType.Success">
            <summary>
            send email when the build succeeds 
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.NotificationType.Fixed">
            <summary>
            send mail when the status of the build changes from "Failed" to "Success". (available from version 1.3.0.2966) 
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Enums.IntegrationStatus">
            <summary>
            The condition determining whether or not the remoting call should be made.
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.IntegrationStatus.Success">
            <summary>
            The specified build will be forced if the current build was successful.
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.IntegrationStatus.Exception">
            <summary>
            The specified build will be forced if the current build had an exception.
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.IntegrationStatus.Failure">
            <summary>
            The specified build will be forced if the current build failed.
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Enums.VSBuildType">
            <summary>
            The type of build you want to execute using the devenv executable
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.VSBuildType.Build">
            <summary>
            Build the solution
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.VSBuildType.Rebuild">
            <summary>
            Rebuild the solution
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.VSBuildType.Clean">
            <summary>
            Perform a clean build
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Enums.TimeoutUnit">
            <summary>
            The measurement of time to wait.
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.TimeoutUnit.Millis">
            <summary>
            Milliseconds
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.TimeoutUnit.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.TimeoutUnit.Minutes">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.TimeoutUnit.Hours">
            <summary>
            Hours
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Enums.SourceControlSetFileTime">
            <summary>
            The modification date that retrieved source files will have.
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.SourceControlSetFileTime.CheckIn">
            <summary>
            The date/time the file was checked in
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.SourceControlSetFileTime.Current">
            <summary>
            The date/time the file was retrieved from Vault
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.SourceControlSetFileTime.Modification">
            <summary>
            The date/time the file was last modified
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Enums.PublishBuildCondition">
            <summary>
            The build conditions that can trigger the publisher
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.PublishBuildCondition.IfModificationExists">
            <summary>
            Only when there are modifications
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.PublishBuildCondition.ForceBuild">
            <summary>
            Only when the build is triggered by a force build
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Enums.PublishBuildCondition.AllBuildConditions">
            <summary>
            Any type of build condition.
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Exceptions.DuplicateProjectNameException">
            <summary>
            An exception that occurs when a project is added with the same name as another project.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Exceptions.DuplicateProjectNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Exceptions.DuplicateProjectNameException"/> class.
            </summary>
            <param name="projectName">Name of the project.</param>
        </member>
        <member name="M:CCNetConfig.Exceptions.RequiredAttributeException.#ctor(CCNetConfig.Core.ICCNetObject)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Exceptions.RequiredAttributeException"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:CCNetConfig.Exceptions.RequiredAttributeException.#ctor(CCNetConfig.Core.ICCNetObject,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Exceptions.RequiredAttributeException"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:CCNetConfig.Core.Exceptions.VersionNotSelectedException">
            <summary>
            Exception that is fired when a version is not selected in the Version File Dialog
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Exceptions.VersionNotSelectedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Exceptions.VersionNotSelectedException"/> class.
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.ExternalLink">
            <summary>
            <para>Each of ExternalLink is used to display project related links on the project report page of the 
            <a href="http://confluence.public.thoughtworks.org/display/CCNET/Web+Dashboard">Web Dashboard</a>, and are meant as a convenient 
            shortcut to project-related web sites outside of <a href="http://confluence.public.thoughtworks.org/display/CCNET">CruiseControl.NET</a>.</para>
            </summary>
            <remarks>
            <para>
            see <a href="http://confluence.public.thoughtworks.org/display/CCNET/ExternalLinks">ExternalLinks</a> documentation for more details
            </para>
            </remarks>
        </member>
        <member name="M:CCNetConfig.Core.ExternalLink.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.ExternalLink.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.ExternalLink.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.ExternalLink.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CCNetConfig.Core.ExternalLink.Name">
            <summary>
            <para>The text to display for the link</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.ExternalLink.Url">
            <summary>
            <para>The URL to link to</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.ExternalLink.DocumentationUri">
            <summary>
            Gets the documentation URI.
            </summary>
            <value>The documentation URI.</value>
        </member>
        <member name="T:CCNetConfig.Core.NameValue">
            <summary>
            Represents an object that has a name and a value.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.NameValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.NameValue"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.NameValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.NameValue"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:CCNetConfig.Core.NameValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.NameValue.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:CCNetConfig.Core.NameValue.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CCNetConfig.Core.NameValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:CCNetConfig.Core.ProjectExtension">
            <summary>
            Represents an extension to the <see cref="T:CCNetConfig.Core.Project">Project</see>.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.ProjectExtension.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.ProjectExtension.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.ProjectExtension.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.ProjectExtension.Clone">
            <summary>
            Creates a copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:CCNetConfig.Core.ProjectExtension.TypeName">
            <summary>
            Gets or sets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:CCNetConfig.Core.ProjectExtension.ExtensionImage">
            <summary>
            Gets or sets the extension image.
            </summary>
            <value>The extension image.</value>
        </member>
        <member name="T:CCNetConfig.Core.Labeller">
            <summary>
            Labellers are used to generate the label that CCNet uses to identify the specific build. The 
            label generated by CCNet can be used to version your assemblies or label your version control system with each build.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Labeller.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Labeller"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:CCNetConfig.Core.Labeller.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Labeller.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Labeller.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.Labeller.Clone">
            <summary>
            Creates a copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:CCNetConfig.Core.Labeller.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="T:CCNetConfig.Core.HiddenPassword">
            <summary>
            An object that returns a password as "*". This is for a property grid, so the password is not displayed.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.HiddenPassword.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.HiddenPassword"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.HiddenPassword.GetPassword">
            <summary>
            Gets the password actual value;
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.HiddenPassword.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.HiddenPassword.Clone">
            <summary>
            Creates a copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:CCNetConfig.Core.HiddenPassword.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="T:CCNetConfig.Core.Project">
            <summary>
            defines all the configuration for one project running in a CruiseControl.NET server
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Project.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Project"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Project.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Project.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.Project.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Project.Clone">
            <summary>
            Creates a copy of the project
            </summary>
            <returns>Copy of the project</returns>
        </member>
        <member name="M:CCNetConfig.Core.Project.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:CCNetConfig.Core.Project.Name">
            <summary>
            <para>The name of your project - this must be unique for any given 
            <a href="http://confluence.public.thoughtworks.org/display/CCNET">CruiseControl.NET</a> server</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.WorkingDirectory">
            <summary>
            <para>The Working Directory for the project (this is used by other blocks). Relative paths are relative to a directory called the project Name in 
            the directory where the <a href="http://confluence.public.thoughtworks.org/display/CCNET">CruiseControl.NET</a> server was launched from. 
            The Working Directory is meant to contain the checked out version of the project under integration.</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.ArtifactDirectory">
            <summary>
            <para>The Artifact Directory for the project (this is used by other blocks). Relative paths are relative to a directory called the project Name in the 
            directory where the <a href="http://confluence.public.thoughtworks.org/display/CCNET">CruiseControl.NET</a> server was launched from. 
            The Artifact Directory is meant to be a persistence location for anything you want saved from the results of the build, e.g. build logs, 
            distributables, etc.</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.WebUrl">
            <summary>
            <para>A reporting URL for this project. This is used by CCTray and the Email Publisher. Typically you should navigate to the Project Report on the 
            Dashboard, and use its URL, but make sure to replace any ampersands with &amp;amp;</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.ModificationDelaySeconds">
            <summary>
            <para>The minimum number of seconds allowed between the last check in and the start of a valid build.
            If any modifications are found within this interval the system will sleep long enough so the last checkin is just outside this interval. 
            For example if the modification delay is set to 10 seconds and the last checkin was 7 seconds ago the system will sleep for 3 seconds and check again. 
            This process will repeat until no modifications have been found within the modification delay window.
            This feature is in <a href="http://confluence.public.thoughtworks.org/display/CCNET">CruiseControl.NET</a> for Source Control systems, like CVS, 
            that do not support atomic checkins since starting a build half way through 
            someone checking in their work could result in invalid 'logical' passes or failures. The property is optional though so if you are using a source 
            control system with atomic checkins, leave it out (and it will default to '0')</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.PublishExceptions">
            <summary>
            <para>If you are experiencing periodic failures in your build process it is possible to configure the 
            <a href="http://confluence.public.thoughtworks.org/display/CCNET">CCNet</a>
            server to not publish the exception as a failed build. Set this value to true to publish exceptions to the build log, or false to just send them to 
            the server log file</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.SourceControl">
            <summary>
            <para>The <see cref="T:CCNetConfig.Core.SourceControl">Source Control</see> used for this project</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.Triggers">
            <summary>
            <para>The <see cref="T:CCNetConfig.Core.Trigger">Trigger</see>s used for this project</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.State">
            <summary>
            <para>The <see cref="T:CCNetConfig.Core.State">State</see> manager used for this project</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.Labeller">
            <summary>
            <para>The <see cref="T:CCNetConfig.Core.Labeller">Labeller</see> used for this project</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.Tasks">
            <summary>
            <para>A set of <see cref="T:CCNetConfig.Core.PublisherTask">Task</see>s to run as part of the build. A failed task will fail the build and any 
            subsequent tasks will not run. 
            Tasks are run sequentially, in the order they appear in the configuration.</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.Publishers">
            <summary>
            <para>A set of <see cref="T:CCNetConfig.Core.PublisherTask">Task</see>s that are run after the build is complete. These tasks are used primarily to 
            clean up after the build and to publish and report on the build results. All tasks in this section will always run regardless of whether previous 
            tasks fail or the build is broken. You should always set an XmlLogPublisher in this section so that your 
            <a href="http://confluence.public.thoughtworks.org/display/CCNET/Web+Dashboard">Web Dashboard</a> 
            will be able to report results.</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.ProjectExtensions">
            <summary>
            Gets the project extensions.
            </summary>
            <value>The project extensions.</value>
        </member>
        <member name="P:CCNetConfig.Core.Project.ExternalLinks">
            <summary>
            <para>The <see cref="T:CCNetConfig.Core.ExternalLink">ExternalLinks</see>s used for this project</para>
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.PreBuild">
            <summary>
            A set of Tasks to run before the build starts and before the source is updated. A failed task will 
            fail the build and any subsequent tasks will not run. Tasks are run sequentially, in the order 
            they appear in the configuration.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Project.QueuePriority">
            <summary>
            Gets or sets the queue priority.
            </summary>
            <value>The queue priority.</value>
        </member>
        <member name="P:CCNetConfig.Core.Project.Queue">
            <summary>
            Gets or sets the queue.
            </summary>
            <value>The queue.</value>
        </member>
        <member name="P:CCNetConfig.Core.Project.Category">
            <summary>
            A general category for this project. This will be used by CCTray and the dashboard in the 
            future to provide groupings to the project. The groupings can span servers in the farm.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:CCNetConfig.Core.Project.DocumentationUri">
            <summary>
            Gets the documentation URI.
            </summary>
            <value>The documentation URI.</value>
        </member>
        <member name="T:CCNetConfig.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Properties.Resources.BackupDefaultFolderName">
            <summary>
              Looks up a localized string similar to My CCNetConfig Backups .
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Properties.Resources.DefaultExternalViewer">
            <summary>
              Looks up a localized string similar to notepad.exe.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Properties.Resources.DefaultExternalViewerArguments">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Properties.Resources.HashCode">
            <summary>
              Looks up a localized string similar to YY4WV+V244gcCCDnWGogRWMldYr30Ko7.
            </summary>
        </member>
        <member name="P:CCNetConfig.Core.Properties.Resources.InitializeVectorCode">
            <summary>
              Looks up a localized string similar to 9XDZNHmXSNE=.
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.PublishersTasksList">
            <summary>
            A collection of PublishersTasks
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.SerializableList`1">
            <summary>
            Represents a collection of objects that can be cloned and serialized
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CCNetConfig.Core.SerializableList`1.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.SerializableList`1.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.PublishersTasksList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.PublishersTasksList"/> class.
            </summary>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:CCNetConfig.Core.PublishersTasksList.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.PublishersTasksList.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.PublishersTasksList.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CCNetConfig.Core.PublishersList">
            <summary>
            A collection of Publishers
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.PublishersList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.PublishersList"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.PublishersList.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CCNetConfig.Core.TasksList">
            <summary>
            A collection of Tasks
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.TasksList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.TasksList"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.TasksList.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CCNetConfig.Core.PrebuildsList">
            <summary>
            A collection of Prebuild items
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.PrebuildsList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.PrebuildsList"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.PrebuildsList.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CCNetConfig.Core.PublisherTask">
            <summary>
            <para>Task Blocks are the action elements of CruiseControl.Net. They're the elements that do things, like executing a program, running tests, 
            or send email results.</para>
            <para>Task blocks must appear in either the tasks section or the publishers section. The tasks section is always run before the publishers 
            section, regardless of the order in which they appear. However, within each of these sections, the tasks are run in the order they appear.</para> 
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.PublisherTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.PublisherTask"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:CCNetConfig.Core.PublisherTask.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.PublisherTask.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.PublisherTask.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.PublisherTask.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CCNetConfig.Core.PublisherTask.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="T:CCNetConfig.Core.Serialization.Serializer`1">
            <summary>
            Provides serialization and deserialation of ICCNetObjects
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CCNetConfig.Core.Serialization.Serializer`1.Serialize(`0)">
            <summary>
            Serializes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Serialization.Serializer`1.Deserialize(System.Xml.XmlElement,`0)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
            <param name="baseObject">The base object.</param>
        </member>
        <member name="T:CCNetConfig.Core.SourceControl">
            <summary>
            A SourceControl Provider for the project.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.SourceControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.SourceControl"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:CCNetConfig.Core.SourceControl.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.SourceControl.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.SourceControl.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.SourceControl.Clone">
            <summary>
            Creates a copy of the source control object
            </summary>
            <returns></returns>
        </member>
        <member name="P:CCNetConfig.Core.SourceControl.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="T:CCNetConfig.Core.State">
            <summary>
            CruiseControl.NET needs to store state about a project. This is data such as the last build label, the time of the last build, 
            and the outcome of the build, etc. The State Manager allows you to specify how and where this data is stored.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.State"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.State.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.State.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.State.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.State.Clone">
            <summary>
            creates a copy of the state object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CCNetConfig.Core.State.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CCNetConfig.Core.State.Directory">
            <summary>
            Gets or sets the directory.
            </summary>
            <value>The directory.</value>
        </member>
        <member name="T:CCNetConfig.Core.Timeout">
            <summary>
            Represents a measurement of time.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Timeout.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Timeout.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Timeout.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.Timeout.Clone">
            <summary>
             creates a copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:CCNetConfig.Core.Timeout.Unit">
            <summary>
            The unit how the duration is measured.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:CCNetConfig.Core.Timeout.Duration">
            <summary>
            The number of units to wait for a timeout.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:CCNetConfig.Core.Timeout.DocumentationUri">
            <summary>
            Gets the documentation URI.
            </summary>
            <value>The documentation URI.</value>
        </member>
        <member name="T:CCNetConfig.Core.Trigger">
            <summary>
            Trigger blocks allow you to specify when CruiseControl.NET will start a new integration cycle.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Trigger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Trigger"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:CCNetConfig.Core.Trigger.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Trigger.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Trigger.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.Trigger.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CCNetConfig.Core.Trigger.TypeName">
            <summary>
            Internally used property to get the type name of the trigger
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.TriggersList">
            <summary>
            A collection of Triggers
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.TriggersList.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.TriggersList.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.TriggersList.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CCNetConfig.Core.Util">
            <summary>
            A Static class that contains helper methods and properties.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Util.RefreshUserSettings">
            <summary>
            Refresh the user settings.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetFilteredPublisherTaskTypes">
            <summary>
            Gets the filtered publisher tasks types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetFilteredSourceControlTypes">
            <summary>
            Gets the filtered source control types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetFilteredLabellerTypes">
            <summary>
            Gets the filtered source control types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetFilteredTriggerTypes">
            <summary>
            Gets the filtered triggers types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetFilteredStateTypes">
            <summary>
            Gets the filtered state types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetFilteredTypes(System.Collections.Generic.List{System.Type})">
            <summary>
            Filters the list of types based on the user settings and the minimum, maximum &amp; exact version attributes.
            </summary>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.UrlEncode(System.Uri)">
            <summary>
            Url encodes the string
            </summary>
            <param name="uri">The uri.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.UrlEncode(System.String)">
            <summary>
            Url encodes the string
            </summary>
            <param name="value">The value.</param>
            <returns>Url Encoded string</returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.UrlDecode(System.String)">
            <summary>
            Decodes the Url Encoded string
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Decodes the Url Encoded string
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,System.Object)">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,System.Nullable{System.Int32})">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,System.String)">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,CCNetConfig.Core.HiddenPassword)">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,CCNetConfig.Core.SourceControl)">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,System.Nullable{System.DateTime})">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,System.Uri)">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,CCNetConfig.Core.Components.AlienbrainUri)">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,System.IO.DirectoryInfo)">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,System.IO.FileInfo)">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,System.Collections.IList)">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired``1(CCNetConfig.Core.ICCNetObject,System.String,CCNetConfig.Core.CloneableList{``0})">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired``1(CCNetConfig.Core.ICCNetObject,System.String,CCNetConfig.Core.CloneableList{``0},System.Int32)">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <param name="min">The min.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,CCNetConfig.Core.CloneableList{System.String})">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CheckRequired(CCNetConfig.Core.ICCNetObject,System.String,System.Nullable{CCNetConfig.Core.Enums.NotificationType})">
            <summary>
            Checks the required.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetConfigFileVersion(System.IO.FileInfo)">
            <summary>
            Gets the config file version.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetConfigFileVersion(System.Xml.XmlDocument)">
            <summary>
            Gets the config file version.
            </summary>
            <param name="doc">The doc.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.RegisterTypeDescriptionProviders(System.Version)">
            <summary>
            Registers the type descriptor providers.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:CCNetConfig.Core.Util.RegisterTypeDescriptionProvider(System.Type,System.Version)">
            <summary>
            Registers the type descriptor provider.
            </summary>
            <param name="type">The type.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetTypeDescriptionProvider(System.Type)">
            <summary>
            Gets the type description provider.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetTypeDescriptionProviderVersion(System.Type)">
            <summary>
            Gets the type description provider version.
            </summary>
            <remarks>Will attempt to fall back to a base type until object if it can not find the version
            info from the passed type. Will default to the version info of the project object if all else fails.</remarks>
            <param name="type">The type.</param>
            <returns>The version selected for the configuration.</returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetMinimumVersion(System.Reflection.MemberInfo)">
            <summary>
            Gets the minimum version attribute for a property.
            </summary>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetMinimumVersion(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the minimum version attribute for a property.
            </summary>
            <param name="pd">The pd.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetMaximumVersion(System.Reflection.MemberInfo)">
            <summary>
            Gets the minimum version attribute for a property.
            </summary>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetMaximumVersion(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the maximum version attribute for a property.
            </summary>
            <param name="pd">The pd.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetExactVersion(System.Reflection.MemberInfo)">
            <summary>
            Gets the minimum version attribute for a property.
            </summary>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetExactVersion(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the exact version attribute for a property.
            </summary>
            <param name="pd">The pd.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetMinimumVersion(System.Type)">
            <summary>
            Gets the minimum version.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetMaximumVersion(System.Type)">
            <summary>
            Gets the maximum version.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetExactVersion(System.Type)">
            <summary>
            Gets the exact version.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetPropertyDescriptor(System.Type,System.String)">
            <summary>
            Gets the property descriptor.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The property descriptor</returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetPropertyDescriptor(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the property descriptor.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>The property descriptor</returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.IsInVersionRange(System.Version,System.Version,System.Version)">
            <summary>
            Determines whether compare is within the version range of min and max.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="compare">The compare.</param>
            <returns>
            	<c>true</c> if is in version range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.IsExactVersion(System.Version,System.Version)">
            <summary>
            Determines whether the specified version is exact version.
            </summary>
            <param name="exact">The exact.</param>
            <param name="compare">The compare.</param>
            <returns>
            	<c>true</c> if the specified version is exactversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.BooleanToInteger(System.Boolean)">
            <summary>
            Converts a Boolean to an integer.
            </summary>
            <param name="val">if set to <c>true</c> 1, otherwise 0.</param>
            <returns>0 or 1</returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetReflectorArrayAttributeValue(System.Type)">
            <summary>
            Gets the reflector array attribute value.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetReflectorArrayAttributeValue(System.Reflection.MemberInfo)">
            <summary>
            Gets the reflector array attribute value.
            </summary>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetReflectorNameAttributeValue(System.Type)">
            <summary>
            Gets the reflector name attribute value.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Throws if the type does not contain the attribute.</exception>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetReflectorNameAttributeValue(System.Reflection.MemberInfo)">
            <summary>
            Gets the reflector name attribute value.
            </summary>
            <param name="mi">The member info.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Throws if the type does not contain the attribute.</exception>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetReflectorNodeType(System.Reflection.MemberInfo)">
            <summary>
            Gets the type of the reflector node.
            </summary>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetCustomAttribute``1(System.Type)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetAllPublisherTasks(System.IO.DirectoryInfo)">
            <summary>
            Gets all publisher tasks.
            </summary>
            <param name="pluginPath">The plugin path.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetAllSourceControls(System.IO.DirectoryInfo)">
            <summary>
            Gets all source controls.
            </summary>
            <param name="pluginPath">The plugin path.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetAllTriggers(System.IO.DirectoryInfo)">
            <summary>
            Gets all triggers.
            </summary>
            <param name="pluginPath">The plugin path.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetAllStates(System.IO.DirectoryInfo)">
            <summary>
            Gets all states.
            </summary>
            <param name="pluginPath">The plugin path.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetAllLabellers(System.IO.DirectoryInfo)">
            <summary>
            Gets all labellers.
            </summary>
            <param name="pluginPath">The plugin path.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetAllProjectExtensions(System.IO.DirectoryInfo)">
            <summary>
            Gets all project extensions.
            </summary>
            <param name="pluginPath">The plugin path.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetItemsByBaseType(System.IO.DirectoryInfo,System.Type)">
            <summary>
            Gets the type of the items by base.
            </summary>
            <param name="dir">The dir.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetItemsByInterfaceType(System.IO.DirectoryInfo,System.Type)">
            <summary>
            Gets the type of the items by interface.
            </summary>
            <param name="dir">The dir.</param>
            <param name="type">The type.</param>
            <returns>List of types</returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CreateInstanceOfType(System.Type)">
            <summary>
            Creates an instance of a Type
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CreateTypeFromString(System.String)">
            <summary>
            Creates the type from string.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetTriggerFromElement(System.Xml.XmlElement)">
            <summary>
            This creates a <see cref="T:CCNetConfig.Core.Trigger">Trigger</see> from an <see cref="T:System.Xml.XmlElement">XmlElement</see>.
            </summary>
            <param name="element"><see cref="T:System.Xml.XmlElement">XmlElement</see></param>
            <returns><see cref="T:CCNetConfig.Core.Trigger">Trigger</see></returns>
            <remarks>This uses 2 different methods to convert the <see cref="T:System.Xml.XmlElement">XmlElement</see> to a
            <see cref="T:CCNetConfig.Core.Trigger">Trigger</see>. If CCNetConfig saved the configuration file before, it added an attribute to some of the
            <see cref="T:System.Xml.XmlElement">XmlElement</see>s in the config file. This attribute tells CCNetConfig exactly what type of object to 
            load. If the attribute does not exists, or it is empty, then all of the SubClasses of <see cref="T:CCNetConfig.Core.Trigger">Trigger</see>
            are compared to the element by <see cref="P:CCNetConfig.Core.Trigger.TypeName">TypeName</see>. If these match, then the <see cref="T:CCNetConfig.Core.Trigger">Trigger</see>
            was found and we create an instance of it and return it.
            </remarks>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetPublisherTaskFromElement(System.Xml.XmlElement)">
            <summary>
            This creates a <see cref="T:CCNetConfig.Core.PublisherTask">PublisherTask</see> from an <see cref="T:System.Xml.XmlElement">XmlElement</see>.
            </summary>
            <param name="element"><see cref="T:System.Xml.XmlElement">XmlElement</see></param>
            <returns><see cref="T:CCNetConfig.Core.PublisherTask">PublisherTask</see></returns>
            <remarks>This uses 2 different methods to convert the <see cref="T:System.Xml.XmlElement">XmlElement</see> to a 
            <see cref="T:CCNetConfig.Core.PublisherTask">PublisherTask</see>. If CCNetConfig saved the configuration file before, it added an attribute to some of the
            <see cref="T:System.Xml.XmlElement">XmlElement</see>s in the config file. This attribute tells CCNetConfig exactly what type of object to 
            load. If the attribute does not exists, or it is empty, then all of the SubClasses of <see cref="T:CCNetConfig.Core.PublisherTask">PublisherTask</see>
            are compared to the element by <see cref="P:CCNetConfig.Core.PublisherTask.TypeName">TypeName</see>. If these match, then the 
            <see cref="T:CCNetConfig.Core.PublisherTask">PublisherTask</see>
            was found and we create an instance of it and return it.
            </remarks>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetSourceControlFromElement(System.Xml.XmlElement)">
            <summary>
            Gets the source control from element.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetLabellerFromElement(System.Xml.XmlElement)">
            <summary>
            This creates a <see cref="T:CCNetConfig.Core.Labeller">Labeller</see> from an <see cref="T:System.Xml.XmlElement">XmlElement</see>.
            </summary>
            <param name="element"><see cref="T:System.Xml.XmlElement">XmlElement</see></param>
            <returns><see cref="T:CCNetConfig.Core.Labeller">Labeller</see></returns>
            <remarks>This uses 2 different methods to convert the <see cref="T:System.Xml.XmlElement">XmlElement</see> to a 
            <see cref="T:CCNetConfig.Core.Labeller">Labeller</see>. If CCNetConfig saved the configuration file before, it added an attribute to some of the
            <see cref="T:System.Xml.XmlElement">XmlElement</see>s in the config file. This attribute tells CCNetConfig exactly what type of object to 
            load. If the attribute does not exists, or it is empty, then all of the SubClasses of <see cref="T:CCNetConfig.Core.Trigger">Trigger</see>
            are compared to the element by <see cref="P:CCNetConfig.Core.Labeller.TypeName">TypeName</see>. If these match, then the 
            <see cref="T:CCNetConfig.Core.Labeller">Labeller</see>
            was found and we create an instance of it and return it.
            </remarks>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetStateFromElement(System.Xml.XmlElement)">
            <summary>
            This creates a <see cref="T:CCNetConfig.Core.State">State</see> from an <see cref="T:System.Xml.XmlElement">XmlElement</see>.
            </summary>
            <param name="element"><see cref="T:System.Xml.XmlElement">XmlElement</see></param>
            <returns><see cref="T:CCNetConfig.Core.State">State</see></returns>
            <remarks>This uses 2 different methods to convert the <see cref="T:System.Xml.XmlElement">XmlElement</see> to a
            <see cref="T:CCNetConfig.Core.State">State</see>. If CCNetConfig saved the configuration file before, it added an attribute to some of the
            <see cref="T:System.Xml.XmlElement">XmlElement</see>s in the config file. This attribute tells CCNetConfig exactly what type of object to 
            load. If the attribute does not exists, or it is empty, then all of the SubClasses of <see cref="T:CCNetConfig.Core.State">State</see>
            are compared to the element by <see cref="P:CCNetConfig.Core.State.Type">Type</see>. If these match, then the <see cref="T:CCNetConfig.Core.State">State</see>
            was found and we create an instance of it and return it.
            </remarks>
        </member>
        <member name="M:CCNetConfig.Core.Util.GetElementOrAttributeValue(System.String,System.Xml.XmlElement)">
            <summary>
            Since CCNet seems to support the property values as <see cref="T:System.Xml.XmlAttribute">XmlAttribute</see>s or 
            <see cref="T:System.Xml.XmlElement">XmlElement</see>s, this looks for the 
            property name as an <see cref="T:System.Xml.XmlAttribute">XmlAttribute</see> and as an <see cref="T:System.Xml.XmlElement">XmlElement</see>.
            </summary>
            <param name="name"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.CreateProjectComments(CCNetConfig.Core.CruiseControl)">
            <summary>
            Creates the project comments.
            </summary>
            <param name="ccnet">The ccnet.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.Decode(System.String)">
            <summary>
            Decodes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.Encode(System.String)">
            <summary>
            Encodes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.StringToEnum``1(System.String)">
            <summary>
            Converts a string to an enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.Util.IsNullable(System.Type)">
            <summary>
            Determines whether the specified t is nullable.
            </summary>
            <param name="t">The t.</param>
            <returns>
            	<c>true</c> if the specified t is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CCNetConfig.Core.Util.UserSettings">
            <summary>
            Gets the user settings.
            </summary>
            <value>The user settings.</value>
        </member>
        <member name="P:CCNetConfig.Core.Util.UserSettingsFile">
            <summary>
            Gets the user settings file.
            </summary>
            <value>The user settings file.</value>
        </member>
        <member name="P:CCNetConfig.Core.Util.TypeDescriptionProviders">
            <summary>
            Gets the type description providers.
            </summary>
            <value>The type description providers.</value>
        </member>
        <member name="P:CCNetConfig.Core.Util.PublisherTasks">
            <summary>
            Gets the publisher tasks.
            </summary>
            <value>The publisher tasks.</value>
        </member>
        <member name="P:CCNetConfig.Core.Util.SourceControls">
            <summary>
            Gets the source controls.
            </summary>
            <value>The source controls.</value>
        </member>
        <member name="P:CCNetConfig.Core.Util.Labellers">
            <summary>
            Gets the labellers.
            </summary>
            <value>The labellers.</value>
        </member>
        <member name="P:CCNetConfig.Core.Util.Triggers">
            <summary>
            Gets the triggers.
            </summary>
            <value>The triggers.</value>
        </member>
        <member name="P:CCNetConfig.Core.Util.States">
            <summary>
            Gets the states.
            </summary>
            <value>The states.</value>
        </member>
        <member name="P:CCNetConfig.Core.Util.ProjectExtensions">
            <summary>
            Gets the project extensions.
            </summary>
            <value>The project extensions.</value>
        </member>
        <member name="P:CCNetConfig.Core.Util.CurrentConfigurationVersion">
            <summary>
            Gets or sets the current configuration version.
            </summary>
            <value>The current configuration version.</value>
        </member>
        <member name="P:CCNetConfig.Core.Util.LastConfigurationVersion">
            <summary>
            Gets or sets the last configuration version.
            </summary>
            <value>The last configuration version.</value>
        </member>
        <member name="T:CCNetConfig.Core.TypeComparer">
            <summary>
            Compares 2 types of objects.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.TypeComparer.Compare(System.Type,System.Type)">
            <summary>
            When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y.Zero x equals y.Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Type T does not implement either the <see cref="T:System.IComparable`1"></see> generic interface or the <see cref="T:System.IComparable"></see> interface.</exception>
        </member>
        <member name="T:CCNetConfig.Core.WebUrlBuilder">
            <summary>
            Web Integration with ViewCVS and other CourceControl Types.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.WebUrlBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.WebUrlBuilder"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.WebUrlBuilder.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCNetConfig.Core.WebUrlBuilder.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:CCNetConfig.Core.WebUrlBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.WebUrlBuilder.Clone">
            <summary>
            Creates a copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:CCNetConfig.Core.WebUrlBuilder.Type">
            <summary>
            Type of WebUrlBuilder to create.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CCNetConfig.Core.WebUrlBuilder.Url">
            <summary>
            The url to link to.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.AlienbrainUriParser">
            <summary>
            
            </summary>
        </member>
        <member name="T:CCNetConfig.Core.Components.DefaultableBooleanTypeConverter">
            <summary>
            Converts the nullable boolean to a string and back.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableBooleanTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableBooleanTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableBooleanTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableBooleanTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableBooleanTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableBooleanTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableBooleanTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.DefaultableEnumTypeConverter">
            <summary>
            Converts the nullable <see cref="T:System.Enum"/> to a <see cref="T:System.String"/> and back.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableEnumTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.DefaultableEnumTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:CCNetConfig.Core.Components.FormatProviderAttribute">
            <summary>
            Provides a method of applying a format string to a value that implements IFormattable.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.FormatProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.FormatProviderAttribute"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:CCNetConfig.Core.Components.FormatProviderAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.NullValueEditorObject">
            <summary>
            An object used to represent a null object in a property grid that allows a user to select from a list of objects
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.NullValueEditorObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.NullValueEditorObject"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.NullValueEditorObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.NullValueEditorObject"/> class.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.NullValueEditorObject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:CCNetConfig.Core.Components.NullValueEditorObject.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:CCNetConfig.Core.Components.ObjectOrNoneTypeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.ObjectOrNoneTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:CCNetConfig.Core.Components.ObjectOrNoneUIEditor">
            <summary>
            Allows an property to either be an object or null.
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Components.ObjectOrNoneUIEditor.NULL_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Components.ObjectOrNoneUIEditor.frmsvr">
            <summary>
            
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.ObjectOrNoneUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.ObjectOrNoneUIEditor.OnListBoxChanged(System.Object,System.EventArgs)">
            <summary>
            Called when [list box changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CCNetConfig.Core.Components.ObjectOrNoneUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.SvnUri">
            <summary>
            
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Components.SvnUri.UriSchemeSvn">
            <summary>
            
            </summary>
        </member>
        <member name="F:CCNetConfig.Core.Components.SvnUri.UriSchemeSvnSsh">
            <summary>
            
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.SvnUri.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CCNetConfig.Core.Components.SvnUri"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="T:CCNetConfig.Core.Components.SvnUriParser">
            <summary>
            
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.SvnUriParser.IsWellFormedOriginalString(System.Uri)">
            <summary>
            Indicates whether a URI is well-formed.
            </summary>
            <param name="uri">The URI to check.</param>
            <returns>
            true if <paramref name="uri"/> is well-formed; otherwise, false.
            </returns>
        </member>
        <member name="T:CCNetConfig.Core.Components.SvnUriTypeConverter">
            <summary>
             A TypeConverter that allows only subversion uri values.
            </summary>
        </member>
        <member name="M:CCNetConfig.Core.Components.SvnUriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.SvnUriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CCNetConfig.Core.Components.SvnUriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:CCNetConfig.Core.Components.SvnUriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:CCNetConfig.Core.Components.SvnUriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
    </members>
</doc>
