//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace CCNet.Community.Plugins.CodePlexApi {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ReleaseServiceSoap", Namespace="http://www.codeplex.com/services/ReleaseService/v1.0")]
    public partial class ReleaseService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateReleaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadReleaseFilesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ReleaseService() {
            this.Url = "https://www.codeplex.com/Services/ReleaseService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateReleaseCompletedEventHandler CreateReleaseCompleted;
        
        /// <remarks/>
        public event UploadReleaseFilesCompletedEventHandler UploadReleaseFilesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.codeplex.com/services/ReleaseService/v1.0/CreateRelease", RequestNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", ResponseNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateRelease(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool showOnHomePage, bool isDefaultRelease, string username, string password) {
            object[] results = this.Invoke("CreateRelease", new object[] {
                        projectName,
                        name,
                        description,
                        releaseDate,
                        status,
                        showToPublic,
                        showOnHomePage,
                        isDefaultRelease,
                        username,
                        password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateReleaseAsync(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool showOnHomePage, bool isDefaultRelease, string username, string password) {
            this.CreateReleaseAsync(projectName, name, description, releaseDate, status, showToPublic, showOnHomePage, isDefaultRelease, username, password, null);
        }
        
        /// <remarks/>
        public void CreateReleaseAsync(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool showOnHomePage, bool isDefaultRelease, string username, string password, object userState) {
            if ((this.CreateReleaseOperationCompleted == null)) {
                this.CreateReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateReleaseOperationCompleted);
            }
            this.InvokeAsync("CreateRelease", new object[] {
                        projectName,
                        name,
                        description,
                        releaseDate,
                        status,
                        showToPublic,
                        showOnHomePage,
                        isDefaultRelease,
                        username,
                        password}, this.CreateReleaseOperationCompleted, userState);
        }
        
        private void OnCreateReleaseOperationCompleted(object arg) {
            if ((this.CreateReleaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateReleaseCompleted(this, new CreateReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.codeplex.com/services/ReleaseService/v1.0/UploadReleaseFiles", RequestNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", ResponseNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadReleaseFiles(string projectName, string releaseName, ReleaseFile[] files, string username, string password) {
            this.Invoke("UploadReleaseFiles", new object[] {
                        projectName,
                        releaseName,
                        files,
                        username,
                        password});
        }
        
        /// <remarks/>
        public void UploadReleaseFilesAsync(string projectName, string releaseName, ReleaseFile[] files, string username, string password) {
            this.UploadReleaseFilesAsync(projectName, releaseName, files, username, password, null);
        }
        
        /// <remarks/>
        public void UploadReleaseFilesAsync(string projectName, string releaseName, ReleaseFile[] files, string username, string password, object userState) {
            if ((this.UploadReleaseFilesOperationCompleted == null)) {
                this.UploadReleaseFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadReleaseFilesOperationCompleted);
            }
            this.InvokeAsync("UploadReleaseFiles", new object[] {
                        projectName,
                        releaseName,
                        files,
                        username,
                        password}, this.UploadReleaseFilesOperationCompleted, userState);
        }
        
        private void OnUploadReleaseFilesOperationCompleted(object arg) {
            if ((this.UploadReleaseFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadReleaseFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.codeplex.com/services/ReleaseService/v1.0")]
    public partial class ReleaseFile {
        
        private byte[] fileDataField;
        
        private string fileNameField;
        
        private string fileTypeField;
        
        private string mimeTypeField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileData {
            get {
                return this.fileDataField;
            }
            set {
                this.fileDataField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string FileType {
            get {
                return this.fileTypeField;
            }
            set {
                this.fileTypeField = value;
            }
        }
        
        /// <remarks/>
        public string MimeType {
            get {
                return this.mimeTypeField;
            }
            set {
                this.mimeTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CreateReleaseCompletedEventHandler(object sender, CreateReleaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UploadReleaseFilesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591